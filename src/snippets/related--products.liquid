{%- comment -%}Set section{%- endcomment -%}

<div class="realted--product--section">
  <h3 class="realted--title">{{section.settings.title}}</h3>
  <div class="related--product--grid--block"></div>
</div>

{%- comment -%}Mobile CSS Overrides {%- endcomment -%}

<style>

  /* Corrects size and postion of pockets on mobile */
  @media (max-width: 796px) and (max-width: 900px) {
    .related--product--pocket {
      width: 50px !important;
      height:50px !important;
      left: -104px;
      top:-50px;
    }
  }

  /* Corrects size and postion of pockets on MiDPI Desktops */
  @media (min-width: 900px) and (max-width: 1400px){
    .related--product--pocket {
      width: 35px !important;
      height:35px !important;
      left: -64px;
      top:-30px;
    }
  }

  /* Corrects size and postion of pockets on HiDPI Desktops */
  @media (min-width: 1400px) {
    .related--product--pocket {
      width: 35px !important;
      height:35px !important;
      left: -84px;
      top:-30px;
    }
  }
</style>


<script>
  const fillRelatedProducts = _ => {
    const handle = '{{ product.handle }}';
    $.getJSON(`${handle}.js`, product => {
      const variants = product.variants
      const relatedContainer = $('.related--product--grid--block')
      let counter = 0
      while (counter < 4) {
        counter ++
        const random  	= Math.floor(Math.random() * (variants.length - 1) + 1)
        const variant 	= variants[random]
        let urlParams 	= variant.options
        urlParams 		= urlParams.map(param => param = `param=${param}`)
        const randomModel = getRandImg(urlParams, false) || ''
        
                  
        
        const newElement 	= `
          <a href="?gender=${variant.options[0]}&type=${variant.options[2]}&color=${variant.options[1]}"
          class="product--grid--item--four w-inline-block"
          data-option-gender="${variant.options[0]}"
          data-option-type="${variant.options[2]}"
          data-option-color="${variant.options[1]}"
          data-product-handle="${handle}"
          >
          <div class="product--grid--item--image random-colored-bg">
          <div class="product--grid--item--variant--overlay " 
          style="background-image: url('${randomModel}');position:relative;">
          <img src="${product.featured_image}"
          class="product--grid--item--pocket related--product--pocket"
          data-pocket-gender="${variant.options[0]}"
          data-pocket-type="${variant.options[2]}"
          data-pocket-color="${variant.options[1]}"
          style="position: absolute; top: 50%; left: 50%;">
          </div>
          
          <div class="product--quickadd"><strong class="product--quickadd--CTA">+ QUICK ADD</strong><div class="product--quickadd--sizes product--design--selector--grid flex-row"><div class="product--size--selector">XS</div><div class="product--size--selector">S</div><div class="product--size--selector">M</div><div class="product--size--selector">L</div><div class="product--size--selector">XL</div><div class="product--size--selector">XXL</div></div></div>
          </div>
          <h5 class="product--grid--item--title">
          ${ variant.options[0] }'s
          ${ variant.options[1] }
          ${ variant.options[2] }
          </h5>
          <div>${ window.currencySymbol + (variant.price/100).toFixed(2) }</div>
          <div class="product--grid--item--link">See more styles</div>
          </a>`
        
        if (randomModel) {
          relatedContainer.append(newElement)
        }
        variants.splice(random, 1)
      }
      fillBg()

      $('.related--product--pocket').each(function () {
        window.positionPocket($(this), $(this).attr('data-pocket-gender'), $(this).attr('data-pocket-type'));
      });
    })
  }

  $(document).ready(fillRelatedProducts)
</script>