<script type="text/javascript">
  const getProducts = _ => jQuery.getJSON('/admin/products.json/', saveProducts)

  const saveProducts = arr => {
    // Receive API data
    const thumbsContainer = $(document).find('.thumbnails-container')
    const currentProduct  = window.location.href.replace(/(http)+.+(products\/)/, '').replace(/\?{1}.+/, '')
    let   products 		  = new Array()

    arr.products.map(product => {
      products.push({
        'id': 			product.id,
        'options': 		product.options,
        'product_type': product.product_type,
        'handle': 		product.handle,
        'title': 		product.title,
        'variants': 	product.variants,
        'images':		product.images,
        'price': 		product.price
      })
    })

    // Append API data to HTML
    products = products.filter(item => item.product_type.toLowerCase().includes('pocket'))

    products.map(product => {
      thumbsContainer.append(`<img class="thumbnail"
      src="${product.images[0].src}"
      data-id="${product.id}"
      alt="${product.handle}"
      title="${product.title}" />`)

      if(product.handle === currentProduct) {
        $(`img.thumbnail[alt="${product.handle}"]`).click()
      }
    })
  }

  const displayProduct = event => {
    const selectedThumb = $(event.target).addClass('selected-thumb')
    const curHandle     = selectedThumb.attr('alt') || false

    // set/remove 'selected-thumb' class
    $('*.selected-thumb').not(selectedThumb).removeClass('selected-thumb')

    // Load the new product's info
    jQuery.getJSON(`${curHandle}.js`, product => {
      console.log("Received product:", product)
      const availableColors = $(document).find('.colors-container').empty()
      const newPrice 		= $('.product--variant--price').text().replace(/[\d\.\,]+/, formatCurrency(product.price))

      // Product tags
      $('.product--VA--name').text(product.title)
      $('.product--VA--desc').text(product.description)
      $('.product--variant--price').text(newPrice)
      $('.product-preview').attr('src', product.featured_image)

      // Available colors
      product
      .options[1]
      .values
      .map(color => availableColors.append(`<li title="${color}"></li>`)) 
    })
  }

  const setColor = event => {
    const colorButton     = $(event.target)
    const newColor        = colorButton.attr('title')
    const currentColor    = $('.current-color')
    const colorsContainer = $(document).find('.colors-container')

    currentColor.text(newColor)
    colorsContainer.children().removeClass('selected-color')
    colorButton.addClass('selected-color')
  }

  const setSize = event => {
    const sizesContainer = $('.product--design--selector--grid')
    const selectedSize = $(event.target)
    sizesContainer.children().removeClass('selected')
    selectedSize.addClass('selected')
  }

  const navThumbnails = event => {
    const selectedThumb = $('.selected-thumb').length ? $('.selected-thumb') : $('img.thumbnail:first-child')
    const dir = $(event.target)

    $('.selected-thumb').removeClass('selected-thumb')
    if (dir.hasClass('go-prev'))
      selectedThumb.prev().addClass('selected-thumb').click()
      else
        selectedThumb.next().addClass('selected-thumb').click()
        }

  const addToCart = event => {
    const requestedColor = $('li.selected-color').attr('title') || false
    const requestedSize = $('.product--size--selector.selected').text().trim() || false
    const quantity	= $('select.product--form--qty--selector').val()
    const product	= $('img.thumbnail.selected-thumb').attr('alt') || false 
    const searchParams = getProductUrlparams(window.location.href)
    searchParams.push(`color=${requestedColor}`)

    event.preventDefault()

    if(product && quantity)
      $.getJSON(`${product}.js`, data => {
        const foundVariant = data.variants.find(variant => {
          let correctVariant = true
          searchParams.map(param => {
            if(!variant.options.some(option => option === param.split('=')[1])) {
              correctVariant = false
            }
          })
          return correctVariant
        })
        
        const cart_data = {
          'id': foundVariant.id,
          'quantity': quantity,
          'properties': { 
            'size': requestedSize,
            'color': requestedColor
          }
        }

        if(Array.isArray(searchParams))
          searchParams.map(param => {
            // Save 'properties' field
            param = param.split('=')
            cart_data.properties[param[0]] = param[1]
          })

          $.post('/cart/add.js', cart_data)
          .complete(data => {
            const response = JSON.parse(data.responseText)
            if (response.id) {
              $('.product--form--atc')
              .addClass('disabled success')
              .attr('disabled', true)
              .attr('value', 'ADDED TO CART')

              toggleCart()
            } else if (response.status === 422) {
              $('.cart-error').text(response.description)
            }
          })
      })
      else {
        console.log(`Data is not ready: qty ${quantity}, prod ${product}`)
      }
  }
  
  const keepShopping = _ => {
    $('.product--form--atc')
    .removeClass('disabled success')
    .removeAttr('disabled')
    .attr('value', 'ADD TO CART')
  }

  $(document).ready(_ => {
    getProducts()
    $(document).on('click', '.thumbnail[src]', displayProduct)
    $(document).on('click', '.thumb-nav-arrow', navThumbnails)
    $(document).on('click', '.colors-container li[title]', setColor)
    $(document).on('click', '.product--size--selector', setSize)
    $(document).on('click', '.product--form--atc', addToCart)
    $(document).on('click', '*[data-keep-shopping], .dark-overlay', keepShopping)
  })
</script>

<style>
  .text-error { color: rgba(204, 77, 63, 0.80); }
  .text-center { text-align: center; }
  .flex-block { flex-basis: 100%; }
  .flex-row {
    display: flex;
    flex-flow: row wrap;
    justify-content: center;
    align-content: center;
  }

  .products-container {
    display: flex;
    flex: 0 0 auto;
    background: rgba(220, 220, 220, 0.1);
    flex-flow: row wrap;
    margin: 5px;
    flex-basis: 20% !important;
  }

  .flex-strech { align-items: stretch; }

  .flex-center { align-content: center; }

  .thumbnail-scrollbar { flex-basis: 10% !important; }

  .main-product-view { flex-basis: 40% !important; }

  .product-thumbnails {
    display: flex;
    flex-basis: 40% !important;
    flex-flow: row wrap;
  }

  .products-container > * {
    background: rgba(220, 220, 220, 0.1);
    margin: 5px;
  }

  .sizes-container span {
    background: #eaeaea;
    padding: 10px;
    margin: 7px;
    border-radius: 2px;
    transition: 0.2s;
  }

  .sizes-container span:hover {
    background: #e2e2e2;
    font-weight: bold;
    transition: 0.2s;
  }

  .thumbnails-container {
    text-align: left; 
    padding: 0 20px;
  }

  img.thumbnail {
    height: 50px;
    width: 50px;
    cursor: pointer;
    transition: 0.3s;
    object-fit: none;
    padding: 3px;
    margin: 5px;
    user-select: none;
  }
  img.thumbnail.selected-thumb {
    outline: 2px solid rgba(0, 0, 0, 0.7);
    background-color: #f9f9f9;
    transition: 0.3s;
  }

  img.product-preview {
    display: block;
    max-width: 180px; 
    opacity: 0.9;
  }

  img.product-preview:hover {
    opacity: 1;
    transition: 0.3s;
  }

  img.product-preview[src=""] {
    display: none;
    opacity: 0;
    transition: 0.3s;
  }

  .no-wrap { white-space: nowrap }

  .product--variant--price {
    font-size: 20px;
    font-weight: 400;
    letter-spacing: 0;
    margin: 0 0 15px 0;
  }

  .product--variant--image--image {
    margin-right: 0;
    left: 0;
  }

  .product--variant--image--image { height: auto; }

  ul.colors-container {
    list-style: none;
    margin-top: 5px;
    padding: 0;
  }
  ul.colors-container li {
    float: left;
    margin: 3px;
    cursor: pointer;
    height: 25px;
    width: 25px;
    border-radius: 50%;
    border: 1px solid rgba(128, 128, 128, 0.49);
    transition: 0.3s;
  }

  ul.colors-container li.selected-color {
    border: 2px solid rgba(0, 0, 0, 0.54);
    transition: 0.3s;
  }

  li[title="Black"] { background: #161616; }
  li[title="White"] { background: white; }
  li[title="Navy"] { background: navy; }
  li[title="Grey"] { background: #eaeaea; }
  li[title="Burgundy"] { background: #900020; }
  li[title="Dark-Grey"] { background: #898686; }

  .product--form--selector {
    min-height: unset;
    margin-bottom: 15px;
  }

  .thumb-nav-container {
    position: relative;
    top: 35px;
    width: 100%;
    display: flex;
    justify-content: space-between;
    pointer-events: none;
  }

  .thumb-nav-arrow { 
    user-select: none;
    pointer-events: initial;
    cursor: pointer;
    font-size: 4em;
    font-weight: 100;
    opacity: 0.5;
    margin: -30px;
  }

  .disabled { cursor: not-allowed !important; }

  .product--form--atc.disabled.success {
    background: lightgreen;
    outline: 1px solid rgba(0, 128, 0, 0.5);
  }
</style>